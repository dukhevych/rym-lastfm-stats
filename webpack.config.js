const fs = require('fs');
const path = require('path');

const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const CopyPlugin = require('copy-webpack-plugin');
const dotenv = require('dotenv');
const dotenvExpand = require('dotenv-expand');
const ESLintPlugin = require('eslint-webpack-plugin');
const glob = require('glob');
const TerserPlugin = require('terser-webpack-plugin');
const { DefinePlugin } = require('webpack');

const generateManifest = require('./manifest.config.js');
const packageJson = require('./package.json');

const appVersion = packageJson.version;

const entries = glob.sync('./src/*.{js,ts}')
  .filter(f => !/\.d\.ts$/.test(f))
  .reduce((acc, file) => {
    const name = path.basename(file, path.extname(file));
    acc[name] = path.resolve(__dirname, file);
    return acc;
  }, {});

const toBaseKey = (p) => {
  const parts = p.replace(/\\/g, "/").split("/");
  const idx = parts.length - 1; // configDefaults.json
  const mod  = parts[idx - 1];  // topArtists
  const area = parts[idx - 2];  // profile
  return area + capitalize(mod);
};

const configDefaultsPaths = glob.sync("src/modules/*/*/configDefaults.json");

const configDefaults = configDefaultsPaths.reduce((acc, configPath) => {
  const baseKey = toBaseKey(configPath);
  const obj = JSON.parse(fs.readFileSync(configPath, "utf-8"));

  for (const [prop, value] of Object.entries(obj)) {
    const flatKey = baseKey + capitalize(prop);
    acc[flatKey] = value;
  }
  return acc;
}, {});

// Module config keys
const moduleConfigKeys = [];

function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

for (const entry of Object.keys(entries)) {
  if (!entry.startsWith('content_')) continue; // Ignore non-content_*.ts files
  if (entry.endsWith('_end')) continue; // Ignore content_*_end.ts files

  const name = entry.replace(/^content_/, '');
  const moduleIndexPath = path.resolve(__dirname, 'src/modules', name, 'index.ts');

  if (!fs.existsSync(moduleIndexPath)) continue;

  const source = fs.readFileSync(moduleIndexPath, 'utf-8');

  const match = source.match(/export\s+default\s+{([\s\S]*?)}/m);
  if (!match) continue;

  const rawKeys = match[1]
    .split(',')
    .map(s => s.trim().replace(/\/\*.*?\*\//g, '').replace(/\/\/.*$/, '').replace(/\s+/g, ''))
    .filter(Boolean);

  for (const mod of rawKeys) {
    const safeKey = `${name}${capitalize(mod)}`;
    moduleConfigKeys.push(safeKey);
  }
}

const moduleTypesOutputPath = path.resolve(__dirname, 'src/generated/moduleTypes.d.ts');

const interfaceLines = moduleConfigKeys
  .map(key => `    ${key}: boolean;`)
  .join('\n');

const moduleToggleInterface = `// AUTO-GENERATED BY webpack.config.js
// DO NOT EDIT MANUALLY

export {};

declare global {
  interface ModuleToggleConfig {
${interfaceLines}
  }
}
`;

fs.mkdirSync(path.dirname(moduleTypesOutputPath), { recursive: true });
fs.writeFileSync(moduleTypesOutputPath, moduleToggleInterface);
console.log('✅ Interface generated at', moduleTypesOutputPath);

// Recent tracks background options
const backgroundOptionsFolderPath = path.resolve(__dirname, 'src/modules/profile/recentTracks/styles/backgrounds');
const backgroundOptionsFiles = fs.readdirSync(backgroundOptionsFolderPath);
const backgroundOptionsImport = backgroundOptionsFiles.map(file => `@import './backgrounds/${file}';`).join('\n');

const backgroundOptionsCssPath = path.resolve(__dirname, 'src/modules/profile/recentTracks/styles/backgrounds.css');
fs.writeFileSync(backgroundOptionsCssPath, `/* AUTO-GENERATED BY webpack.config.js
/* DO NOT EDIT MANUALLY */

${backgroundOptionsImport}`);
console.log('✅ Background options css generated at', backgroundOptionsCssPath);

module.exports = (env) => {
  const browserTarget = env.browser;

  if (!browserTarget) {
    throw new Error('Missing required env.browser value (e.g., --env browser=chrome)');
  }

  const isLocalDev = env.local === 'true';
  const outputPath = path.resolve(__dirname, `dist/${browserTarget}`);

  const loadEnv = (envPath) => {
    if (fs.existsSync(envPath)) {
      const envConfig = dotenv.config({ path: envPath });
      dotenvExpand.expand(envConfig);
      return envConfig.parsed || {};
    }
    return {};
  };

  const envRoot = loadEnv(!isLocalDev ? '.env' : '.env.local');
  const envBrowser = loadEnv(!isLocalDev ? `.env.${browserTarget}` : `.env.${browserTarget}.local`);

  const combinedEnv = {
    ...process.env,
    ...envRoot,
    ...envBrowser,
  };

  console.log('Mode:', process.env.NODE_ENV);
  console.log('Build version:', appVersion);
  console.log('Browser target:', browserTarget);
  console.log('System api key:', combinedEnv.LASTFM_API_KEY ? '✅' : '❌');
  console.log('System secret key:', combinedEnv.LASTFM_API_SECRET ? '✅' : '❌');

  if (!combinedEnv.LASTFM_API_KEY) {
    throw new Error('Missing required LASTFM_API_KEY environment variable');
  }

  if (!combinedEnv.LASTFM_API_SECRET) {
    throw new Error('Missing required LASTFM_API_SECRET environment variable');
  }

  const publicEnvVars = [
    'LASTFM_API_KEY',
    'LASTFM_API_SECRET',
    'NODE_ENV',
  ];

  const envKeys = publicEnvVars.reduce((acc, key) => {
    acc[`process.env.${key}`] = JSON.stringify(combinedEnv[key]);
    return acc;
  }, {});

  return {
    entry: entries,
    output: {
      filename: '[name].js',
      path: outputPath,
      sourceMapFilename: '[name].[contenthash].js.map',
    },
    node: false,
    cache: {
      type: 'filesystem',
    },
    devtool: process.env.NODE_ENV === 'production' ? false : 'source-map',
    mode: process.env.NODE_ENV || 'development',
    resolve: {
      alias: {
        '@': path.resolve(__dirname, 'src'),
      },
      extensions: ['mjs', '.ts', '.js', '.svelte'],
      mainFields: ['svelte', 'browser', 'module', 'main'],
      conditionNames: ['svelte', 'browser', 'import', 'module', 'default'],
    },
    module: {
      rules: [
        {
          test: /\.svelte(\.[jt]s)?$/,
          use: {
            loader: 'svelte-loader',
            options: {
              compilerOptions: {
                dev: process.env.NODE_ENV !== 'production',
                runes: true,
              },
              preprocess: require('svelte-preprocess')({
                postcss: true,
                typescript: true,
              }),
            },
          },
        },
        {
          test: /\.js$/,
          exclude: /node_modules/,
          use: {
            loader: 'babel-loader',
            options: {
              cacheDirectory: true,
            },
          },
        },
        {
          test: /\.css$/,
          use: [
            {
              loader: 'style-loader',
              options: {
                insert: require.resolve('./src/helpers/styleLoaderInsert.ts'),
              }
            },
            'css-loader',
            'postcss-loader',
          ],
        },
        {
          test: /\.svg$/i,
          use: 'raw-loader',
        },
        {
          test: /\.csv$/i,
          resourceQuery: /raw/,
          use: 'raw-loader',
        },
        {
          test: /\.ts$/,
          exclude: [/node_modules/, /\.d\.ts$/, /\.svelte$/],
          use: {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
            },
          },
        },
      ],
    },
    plugins: [
      new CleanWebpackPlugin({
        cleanOnceBeforeBuildPatterns: [outputPath],
        dry: false,
        dangerouslyAllowCleanPatternsOutsideProject: true,
        verbose: true
      }),
      new DefinePlugin({
        ...envKeys,
        'process.env.APP_VERSION': JSON.stringify(appVersion),
        'process.env.BROWSER_TARGET': JSON.stringify(browserTarget),
        'process.env.MODULES_ARRAY': JSON.stringify(Object.fromEntries(moduleConfigKeys.map(k => [k, true]))),
        'process.env.BACKGROUND_OPTIONS_QTY': JSON.stringify(backgroundOptionsFiles.length),
        'process.env.CONFIG_DEFAULTS': JSON.stringify(configDefaults),
      }),
      new CopyPlugin({
        patterns: [
          { from: 'public', to: '.' },
          {
            from: 'manifest.config.js',
            to: 'manifest.json',
            transform() {
              const manifest = generateManifest(browserTarget);
              return Buffer.from(
                JSON.stringify(
                  {
                    ...JSON.parse(manifest),
                    version: process.env.npm_package_version,
                  },
                  null,
                  2
                )
              );
            },
          },
        ],
      }),
      new ESLintPlugin({
        extensions: ['js', 'ts', 'svelte'],
        configType: 'flat',
        fix: process.env.NODE_ENV === 'production',
        failOnError: true,
      }),
    ],
    optimization: {
      minimize: process.env.NODE_ENV === 'production',
      minimizer: [new TerserPlugin({
        parallel: true,
        terserOptions: {
          sourceMap: true,
          compress: {
            drop_console: false,
          },
        },
      })],
      usedExports: true,
      sideEffects: false,
    },
  };
};
