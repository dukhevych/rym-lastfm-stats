name: Common Build and Package
on:
  workflow_call:
    inputs:
      build_command:
        description: 'The command to build the extension'
        required: true
        type: string
      dist_folder:
        description: 'The folder to package'
        required: true
        type: string
      zip_name:
        description: 'The name of the ZIP file'
        required: true
        type: string
      release_type:
        description: 'Release type (production, beta, alpha, unlisted)'
        required: false
        type: string
        default: 'production'
    secrets:
      FIREFOX_LASTFM_API_KEY:
        description: 'Firefox Last.fm API Key'
        required: false  # Will be validated at runtime
      FIREFOX_LASTFM_API_SECRET:
        description: 'Firefox Last.fm API Secret'
        required: false
      CHROME_LASTFM_API_KEY:
        description: 'Chrome Last.fm API Key'
        required: false
      CHROME_LASTFM_API_SECRET:
        description: 'Chrome Last.fm API Secret'
        required: false
    outputs:
      version:
        description: "The version of the package"
        value: ${{ jobs.build-and-package.outputs.version }}
      zip_path:
        description: "The path to the packaged ZIP file"
        value: ${{ jobs.build-and-package.outputs.zip_path }}
      release_type:
        description: "The release type"
        value: ${{ inputs.release_type }}
jobs:
  build-and-package:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      zip_path: ${{ steps.zip.outputs.ZIP_PATH }}
      build_command: ${{ inputs.build_command }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: npm install

    # ✅ Validate required secrets and create the correct `.env` file
    - name: Create .env file for the correct browser
      run: |
        if [[ "${{ inputs.zip_name }}" == "firefox-extension" ]]; then
          if [[ -z "${{ secrets.FIREFOX_LASTFM_API_KEY }}" || -z "${{ secrets.FIREFOX_LASTFM_API_SECRET }}" ]]; then
            echo "❌ ERROR: FIREFOX_LASTFM_API_KEY and FIREFOX_LASTFM_API_SECRET are required but missing."
            exit 1
          fi
          echo "LASTFM_API_KEY=${{ secrets.FIREFOX_LASTFM_API_KEY }}" > .env.firefox
          echo "LASTFM_API_SECRET=${{ secrets.FIREFOX_LASTFM_API_SECRET }}" >> .env.firefox
          echo "✅ Created .env.firefox"
        elif [[ "${{ inputs.zip_name }}" == "chrome-extension" ]]; then
          if [[ -z "${{ secrets.CHROME_LASTFM_API_KEY }}" || -z "${{ secrets.CHROME_LASTFM_API_SECRET }}" ]]; then
            echo "❌ ERROR: CHROME_LASTFM_API_KEY and CHROME_LASTFM_API_SECRET are required but missing."
            exit 1
          fi
          echo "LASTFM_API_KEY=${{ secrets.CHROME_LASTFM_API_KEY }}" > .env.chrome
          echo "LASTFM_API_SECRET=${{ secrets.CHROME_LASTFM_API_SECRET }}" >> .env.chrome
          echo "✅ Created .env.chrome"
        else
          echo "❌ Unknown build target: ${{ inputs.zip_name }}"
          exit 1
        fi

    - name: Build the extension
      run: ${{ inputs.build_command }}

    - name: Get package version
      id: version
      run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Package the extension
      id: zip
      run: |
        cd ${{ inputs.dist_folder }} && zip -r ../../${{ inputs.zip_name }}-${{ steps.version.outputs.VERSION }}.zip ./*
        echo "ZIP_PATH=${{ inputs.zip_name }}-${{ steps.version.outputs.VERSION }}.zip" >> $GITHUB_OUTPUT

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.zip_name }}-${{ steps.version.outputs.VERSION }}
        path: ${{ steps.zip.outputs.ZIP_PATH }}
