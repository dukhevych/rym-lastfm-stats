name: Publish Chrome Extension
on:
  push:
    branches:
      - release
      - beta
      - alpha
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (no actual publishing)'
        type: boolean
        default: true
      release_type:
        description: 'Release type'
        type: choice
        options:
          - production
          - beta
          - alpha
        default: 'production'
        required: true
jobs:
  publish-chrome:
    uses: ./.github/workflows/common.yml
    with:
      build_command: npm run build:chrome
      dist_folder: ./dist/chrome
      zip_name: chrome-extension
      release_type: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_type || (github.ref_name == 'release' && 'production' || github.ref_name) }}
    secrets:
      CHROME_LASTFM_API_KEY: ${{ secrets.CHROME_LASTFM_API_KEY }}
      CHROME_LASTFM_API_SECRET: ${{ secrets.CHROME_LASTFM_API_SECRET }}
  publish:
    runs-on: ubuntu-latest
    needs: publish-chrome
    steps:
    - name: Download extension package
      uses: actions/download-artifact@v4
      with:
        name: chrome-extension-${{ needs.publish-chrome.outputs.version }}
        path: ./
    - name: Verify ZIP file
      run: |
        echo "Extension version: ${{ needs.publish-chrome.outputs.version }}"
        echo "ZIP file: ${{ needs.publish-chrome.outputs.zip_path }}"
        echo "Release type: ${{ needs.publish-chrome.outputs.release_type }}"
        ls -la
        echo "ZIP contents:"
        unzip -l ${{ needs.publish-chrome.outputs.zip_path }}
    # The Chrome workflow needs access to the source directory to modify version
    - name: Checkout code
      if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run != 'true' }}
      uses: actions/checkout@v4
    - name: Prepare Chrome source directory
      if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run != 'true' }}
      run: |
        npm install
        ${{ needs.publish-chrome.outputs.build_command || 'npm run build:chrome' }}

        # Update the version in manifest.json if needed for alpha/beta
        if [[ "${{ needs.publish-chrome.outputs.release_type }}" == "alpha" || "${{ needs.publish-chrome.outputs.release_type }}" == "beta" ]]; then
          VERSION=$(node -p "require('./package.json').version")
          SUFFIX="${{ needs.publish-chrome.outputs.release_type }}"

          jq ".version = \"$VERSION\" | .version_name = \"$VERSION $SUFFIX\"" ./dist/chrome/manifest.json > temp.json && mv temp.json ./dist/chrome/manifest.json

          echo "Updated manifest.json:"
          cat ./dist/chrome/manifest.json | grep version
          # Repackage with updated manifest
          rm -f ${{ needs.publish-chrome.outputs.zip_path }}
          zip -r ${{ needs.publish-chrome.outputs.zip_path }} ./dist/chrome
        else
          # Repackage with updated manifest
          rm -f ${{ needs.publish-chrome.outputs.zip_path }}
          zip -r ${{ needs.publish-chrome.outputs.zip_path }} ./dist/chrome
        fi
    # Only run this step if NOT in dry-run mode
    - name: Upload to Chrome Web Store
      if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run != 'true' }}
      env:
        CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
        REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
        EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
      run: |
        npm install -g chrome-webstore-upload-cli

        # Set the publishing target based on release type
        PUBLISH_TARGET=""
        if [[ "${{ needs.publish-chrome.outputs.release_type }}" == "production" ]]; then
          PUBLISH_TARGET="default"
        elif [[ "${{ needs.publish-chrome.outputs.release_type }}" == "beta" ]]; then
          PUBLISH_TARGET="trustedTesters"
        elif [[ "${{ needs.publish-chrome.outputs.release_type }}" == "alpha" ]]; then
          PUBLISH_TARGET="trustedTesters"  # Chrome Web Store only has production and trustedTesters
        fi

        echo "Uploading extension..."
        npx chrome-webstore-upload upload --source ${{ needs.publish-chrome.outputs.zip_path }} \
                            --extension-id $EXTENSION_ID \
                            --client-id $CLIENT_ID \
                            --client-secret $CLIENT_SECRET \
                            --refresh-token $REFRESH_TOKEN

        if [[ -n "$PUBLISH_TARGET" ]]; then
          echo "Publishing to target: $PUBLISH_TARGET"
          npx chrome-webstore-upload publish --extension-id $EXTENSION_ID \
                               --client-id $CLIENT_ID \
                               --client-secret $CLIENT_SECRET \
                               --refresh-token $REFRESH_TOKEN \
                               --target $PUBLISH_TARGET
        fi
    # Print message in dry-run mode
    - name: Dry Run Message
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true' }}
      run: |
        echo "üîç DRY RUN COMPLETED"
        echo "‚úÖ Build successful"
        echo "‚úÖ ZIP created: ${{ needs.publish-chrome.outputs.zip_path }}"
        echo "‚úÖ Version: ${{ needs.publish-chrome.outputs.version }}"
        echo "‚úÖ Release type: ${{ needs.publish-chrome.outputs.release_type }}"
        echo "‚è≠Ô∏è Publishing step was skipped"
        echo ""
        if [[ "${{ needs.publish-chrome.outputs.release_type }}" == "production" ]]; then
          echo "If this were a real publish, the extension would be uploaded to the Chrome Web Store and published to all users"
        elif [[ "${{ needs.publish-chrome.outputs.release_type }}" == "beta" ]]; then
          echo "If this were a real publish, the extension would be uploaded to the Chrome Web Store and published to trusted testers"
        elif [[ "${{ needs.publish-chrome.outputs.release_type }}" == "alpha" ]]; then
          echo "If this were a real publish, the extension would be uploaded to the Chrome Web Store and published to trusted testers"
        fi
